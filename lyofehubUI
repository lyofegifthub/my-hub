
local function fetchHWIDList()
    local success, HWIDTable = pcall(function()
        return loadstring(game:HttpGet("https://pastebin.com/raw/Jn0dKnUR"))()
    end)

    if not success or type(HWIDTable) ~= "table" then
        warn("❌ Failed to load HWIDTable. Check the Pastebin link.")
        return nil
    end

    return HWIDTable
end

local HWIDTable = fetchHWIDList()
if not HWIDTable then return end

local HWID = game:GetService("RbxAnalyticsService"):GetClientId()
local isWhitelisted = false

for _, v in pairs(HWIDTable) do
    if HWID == v then
        isWhitelisted = true
        break
    end
end

if not isWhitelisted then
    warn("❌ Your HWID is NOT whitelisted! Contact the script owner.")
    return
end

print("✅ Your HWID is Whitelisted!")

-- Load Luxware UI Library Safely
local successUI, Luxtl = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/lyofegifthub/my-hub/refs/heads/main/lyoUI"))()
end)

if not successUI or type(Luxtl) ~= "table" or type(Luxtl.CreateWindow) ~= "function" then
    warn("❌ Failed to load UI Library. The script will not continue.")
    return
end


--#region Player Tab
local PlayerTab = Luxt:Tab("Player")
local Playerer = PlayerTab:Section("Player")
local PlayerSection = PlayerTab:Section("Credits")
local UIS = game:GetService("UserInputService")

-- Menambahkan informasi di Player Section
PlayerSection:Label("Owner - lyofe#0986")
PlayerSection:Label("Developer - lyofe#0986")
PlayerSection:Label("Discord server - https://discord.gg/jKEgFwy68Z")


-- WalkSpeed
local SetSpeed = 16
Playerer:Slider("WalkSpeed", 16, 250, function(currentValue)
    SetSpeed = currentValue
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = currentValue 
end)

game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = SetSpeed
end)

-- Sprint
UIS.InputBegan:Connect(function(input, gameProcessedEvent)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        OldWalkSpeed = game.Players.LocalPlayer.Character.Humanoid.WalkSpeed
        SetSpeed = 100
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = SetSpeed
    end
end)

UIS.InputEnded:Connect(function(input, gameProcessedEvent)
    if input.KeyCode == Enum.KeyCode.LeftShift then
        SetSpeed = OldWalkSpeed
    end
end)

-- Fly
local speeds = 1

Playerer:Slider("Fly Speed", 1, 15, function(currentValue)
    speeds = currentValue
    speed.Text = speeds
    if nowe == true then


    tpwalking = false
    for i = 1, speeds do
        spawn(function()

            local hb = game:GetService("RunService").Heartbeat


            tpwalking = true
            local chr = game.Players.LocalPlayer.Character
            local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
            while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                if hum.MoveDirection.Magnitude > 0 then
                    chr:TranslateBy(hum.MoveDirection)
                end
            end

        end)
        end
        end
end)
-- Combined Fly Function with Adjustable Speed
local Players = game.Players
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local FLYING = false

local function getRoot(char)
    return char:FindFirstChild('HumanoidRootPart') or char:FindFirstChild('Torso') or char:FindFirstChild('UpperTorso')
end
local speaker = game:GetService("Players").LocalPlayer
game.UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.Q then
        if nowe == true then
            nowe = false
    
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,true)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,true)
            speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.RunningNoPhysics)
        else 
            nowe = true
    
    
    
            for i = 1, speeds do
                spawn(function()
    
                    local hb = game:GetService("RunService").Heartbeat
    
    
                    tpwalking = true
                    local chr = game.Players.LocalPlayer.Character
                    local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
                    while tpwalking and hb:Wait() and chr and hum and hum.Parent do
                        if hum.MoveDirection.Magnitude > 0 then
                            chr:TranslateBy(hum.MoveDirection)
                        end
                    end
    
                end)
            end
            game.Players.LocalPlayer.Character.Animate.Disabled = true
            local Char = game.Players.LocalPlayer.Character
            local Hum = Char:FindFirstChildOfClass("Humanoid") or Char:FindFirstChildOfClass("AnimationController")
    
            for i,v in next, Hum:GetPlayingAnimationTracks() do
                v:AdjustSpeed(0)
            end
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Climbing,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Flying,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.GettingUp,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Landed,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Physics,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.PlatformStanding,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Ragdoll,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Running,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.RunningNoPhysics,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.StrafingNoPhysics,false)
            speaker.Character.Humanoid:SetStateEnabled(Enum.HumanoidStateType.Swimming,false)
            speaker.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Swimming)
        end
    
    
    
    
        if game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid").RigType == Enum.HumanoidRigType.R6 then
    
    
    
            local plr = game.Players.LocalPlayer
            local torso = plr.Character.Torso
            local flying = true
            local deb = true
            local ctrl = {f = 0, b = 0, l = 0, r = 0}
            local lastctrl = {f = 0, b = 0, l = 0, r = 0}
            local maxspeed = 50
            local speed = 0
    
    
            local bg = Instance.new("BodyGyro", torso)
            bg.P = 9e4
            bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            bg.cframe = torso.CFrame
            local bv = Instance.new("BodyVelocity", torso)
            bv.velocity = Vector3.new(0,0.1,0)
            bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
            if nowe == true then
                plr.Character.Humanoid.PlatformStand = true
            end
            while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
                game:GetService("RunService").RenderStepped:Wait()
    
                if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
                    speed = speed+.5+(speed/maxspeed)
                    if speed > maxspeed then
                        speed = maxspeed
                    end
                elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
                    speed = speed-1
                    if speed < 0 then
                        speed = 0
                    end
                end
                if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
                    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                    lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
                elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
                    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                else
                    bv.velocity = Vector3.new(0,0,0)
                end
                --  game.Players.LocalPlayer.Character.Animate.Disabled = true
                bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
            end
            ctrl = {f = 0, b = 0, l = 0, r = 0}
            lastctrl = {f = 0, b = 0, l = 0, r = 0}
            speed = 0
            bg:Destroy()
            bv:Destroy()
            plr.Character.Humanoid.PlatformStand = false
            game.Players.LocalPlayer.Character.Animate.Disabled = false
            tpwalking = false
    
    
    
    
        else
            local plr = game.Players.LocalPlayer
            local UpperTorso = plr.Character.UpperTorso
            local flying = true
            local deb = true
            local ctrl = {f = 0, b = 0, l = 0, r = 0}
            local lastctrl = {f = 0, b = 0, l = 0, r = 0}
            local maxspeed = 50
            local speed = 0
    
    
            local bg = Instance.new("BodyGyro", UpperTorso)
            bg.P = 9e4
            bg.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            bg.cframe = UpperTorso.CFrame
            local bv = Instance.new("BodyVelocity", UpperTorso)
            bv.velocity = Vector3.new(0,0.1,0)
            bv.maxForce = Vector3.new(9e9, 9e9, 9e9)
            if nowe == true then
                plr.Character.Humanoid.PlatformStand = true
            end
            while nowe == true or game:GetService("Players").LocalPlayer.Character.Humanoid.Health == 0 do
                wait()
    
                if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then
                    speed = speed+.5+(speed/maxspeed)
                    if speed > maxspeed then
                        speed = maxspeed
                    end
                elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then
                    speed = speed-1
                    if speed < 0 then
                        speed = 0
                    end
                end
                if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then
                    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                    lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r}
                elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then
                    bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed
                else
                    bv.velocity = Vector3.new(0,0,0)
                end
    
                bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0)
            end
            ctrl = {f = 0, b = 0, l = 0, r = 0}
            lastctrl = {f = 0, b = 0, l = 0, r = 0}
            speed = 0
            bg:Destroy()
            bv:Destroy()
            plr.Character.Humanoid.PlatformStand = false
            game.Players.LocalPlayer.Character.Animate.Disabled = false
            tpwalking = false
    
    
    
        end
    
    end
end)

-- Call Fly function
Playerer:Label("Press Q To Toggle Fly")

game:GetService("Players").LocalPlayer.Idled:connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, "W", false, game)
        wait()
    game:GetService("VirtualInputManager"):SendKeyEvent(false, "W", false, game)
end)

-- No Clip
function noclip()
    Clip = false
    local function Nocl()
        if Clip == false and game.Players.LocalPlayer.Character ~= nil then
            for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
                    v.CanCollide = false
                end
            end
        end
        wait(0.21) -- basic optimization
    end
    Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

function clip()
    if Noclip then Noclip:Disconnect() end
    Clip = true
end

Playerer:Toggle("No Clip", function(isToggled)
    if isToggled then
        noclip()
    else
        clip()
    end
end)
-- Hard Dragger
local CustomDragger = false

function Dragger()
    game.Workspace.ChildAdded:connect(function(a)
        if a.Name == "Dragger" then
            local bg = a:WaitForChild("BodyGyro")
            local bp = a:WaitForChild("BodyPosition")
            repeat
                if CustomDragger then
                    task.wait()
                    bp.P = 120000
                    bp.D = 1000
                    bp.maxForce = Vector3.new(math.huge,math.huge,math.huge)
                    bg.maxTorque = Vector3.new(math.huge, math.huge, math.huge)
                else
                    wait()
                    bp.P = 10000
                    bp.D = 800
                    bp.maxForce = Vector3.new(17000, 17000, 17000)
                    bg.maxTorque = Vector3.new(200, 200, 200)
                end
            until not a
        end
    end)
end

Dragger()

Playerer:Button("Hard Dragger", function()
    if CustomDragger == false then
        CustomDragger = true
    else
        CustomDragger = false
    end
end)

-- Walk On Water
Playerer:Toggle("Walk On Water", function(isToggled)
    for i,v in next,game.Workspace.Water:GetChildren() do
        if v.Name == "Water" then
            if isToggled then
                v.CanCollide = true
                else
                v.CanCollide = false
            end
        end
    end
end) 

--#endregion
-- =======================================
-- BAGIAN 1: FUNGSI PENDUKUNG (LETakkan DI BAGIAN PALING ATAS)
-- =======================================

local X, Y, Z = 0, 0, 0  -- Offset global
local DesiredOwner      -- Akan di-set melalui TextBox "Base Owner"
local GivingTo          -- Akan di-set melalui TextBox "Base Receiver"

-- Fungsi GetOffset() – Menghitung offset dari OriginSquare base Owner ke Receiver
function GetOffset()
    local Properties = game.Workspace.Properties
    local OriginSquare1 = nil
    local OriginSquare2 = nil

    local trimmedOwner = (DesiredOwner or ""):gsub("^%s*(.-)%s*$", "%1")
    local trimmedReceiver = (GivingTo or ""):gsub("^%s*(.-)%s*$", "%1")

    for _, plot in ipairs(Properties:GetChildren()) do
        if plot:FindFirstChild("Owner") and plot:FindFirstChild("OriginSquare") then
            local foundOwner = tostring(plot.Owner.Value):gsub("^%s*(.-)%s*$", "%1")
            if foundOwner == trimmedOwner then
                OriginSquare1 = plot.OriginSquare.CFrame.Position
            elseif foundOwner == trimmedReceiver then
                OriginSquare2 = plot.OriginSquare.CFrame.Position
            end
        end
    end

    if OriginSquare1 and OriginSquare2 then
        local offsetFound = OriginSquare2 - OriginSquare1
        X, Y, Z = offsetFound.X, offsetFound.Y, offsetFound.Z
        print("Offset (Owner -> Receiver) =", X, Y, Z)
    else
        X, Y, Z = 0, 0, 0
        warn("Tidak bisa menemukan OriginSquare base Owner atau Receiver!")
    end
end

-- Fungsi saveCFrameToFile() – Placeholder (opsional)
function saveCFrameToFile(cf)
    -- Jika tidak diperlukan, biarkan kosong atau hanya print
    -- print("Saving CFrame:", cf)
end

-- Jika environment tidak mendukung table.find, definisikan penggantinya:
if not table.find then
    function table.find(tbl, val)
        for i, v in ipairs(tbl) do
            if v == val then return i end
        end
        return nil
    end
end

-- Fungsi untuk meng-anchor semua part di dalam model dan menonaktifkan collision
local function setPartsAnchoredAndNoCollision(model, anchorState, collisionState)
    for _, part in ipairs(model:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = anchorState
            part.CanCollide = collisionState
        end
    end
end

-- =======================================
-- BAGIAN 2: BASE MOVER TAB (LETakkan SETELAH BAGIAN PENDUKUNG)
-- =======================================

local BaseMoverTab = Luxt:Tab("Base Mover")
local BaseMover = BaseMoverTab:Section("Base Mover")

-- Variabel kontrol untuk kategori
local DoStructure = false
local DoGlass = false
local DoFurniture = false
local DoRedStone = false

local Count = 0
local PlayerModels = game.Workspace.PlayerModels
local LocalPlayer = game:GetService("Players").LocalPlayer

-- Daftar kategori objek (sesuaikan dengan base-mu)
local Structures = {
    "Wall1","Wall1Corner","Wall1Short","Wall1ShortCorner","Wall1ShortThin",
    "Wall1Tall","Wall1TallCorner","Wall1TallThin","Wall1Thin",
    "Wall2","Wall2Corner","Wall2Short","Wall2ShortCorner","Wall2ShortThin",
    "Wall2Tall","Wall2TallCorner","Wall2TallThin","Wall2Thin",
    "Wall3","Wall3Corner","Wall3Tall","Wall3TallCorner","Wall3TallThin","Wall3Thin",
    "Floor1","Floor1Large","Floor1Small","Floor1Tiny",
    "Floor2","Floor2Large","Floor2Small","Floor2Tiny",
    "Door1","Door2","Door3",
    "Ladder1","Post","Stair1","Stair2",
    "Wedge1","Wedge1_Thin","Wedge2","Wedge2_Thin","Wedge3","Wedge3_Thin",
    "Wedge4","Wedge4_Thin","Wedge5","Wedge5_Thin","Wedge6","Wedge6_Thin",
    "Wedge7","Wedge7_Thin","Wedge8","Wedge8_Thin","Wedge9","Wedge9_Thin",
    "Wedge10","Wedge10_Thin"
}
local Furniture = {
    "Cabinet1","Cabinet1CornerTight","Cabinet1CornerWide","Cabinet1Thin",
    "Chair1","CounterTop1","CounterTop1Sink","CounterTop1Thin",
    "Table1","Table2",
    "Painting1","Painting2","Painting3","Painting4","Painting5","Painting6","Painting7","Painting8","Painting9"
}
local Glass = {
    "GlassPane4","GlassPane3","GlassPane2","GlassPane1","GlassDoor1"
}
local RedStone = {
    "LogSweeper","ConveyorFunnel","StraightConveyor","TightTurnConveyor","TiltConveyor",
    "ConveyorSwitch","StraightSwitchConveyorRight","StraightSwitchConveyorLeft","Hatch",
    "WoodChecker","WallLight1","WallLight2","Sawmill4L","ChopSaw","ClockSwitch","Lever0",
    "PressurePlate","Refridgerator","Seat_Couch","Seat_Armchair","SignalSustain","Seat_Loveseat",
    "GateAND","GateNOT","GateOR","GateXOR","SignalDelay","Laser","LaserReceiver",
    "Dishwasher","Bed2","Bed1","Toilet","Pickup1","Stove"
}

-- Toggle UI untuk memilih kategori
BaseMover:Toggle("Main Structures", function(t) DoStructure = t end)
BaseMover:Toggle("Glass", function(t) DoGlass = t end)
BaseMover:Toggle("Furniture", function(t) DoFurniture = t end)
BaseMover:Toggle("Converyers,Sawmil,Etc", function(t) DoRedStone = t end)

-- TextBox untuk Base Owner dan Base Receiver
BaseMover:TextBox("Base Owner", "Username", function(txt)
    DesiredOwner = txt
    print("DesiredOwner:", DesiredOwner)
end)
BaseMover:TextBox("Base Receiver", "Username", function(txt)
    GivingTo = txt
    print("GivingTo:", GivingTo)
end)


-------------------------------------------------------
-- TELEPORTASI BANGUNAN/ITEMS (ANCHOR & NON-COLLIDE, Delay = 1 detik)
-------------------------------------------------------

-- MODIFIED StartTeleportOptimized() dengan total delay 0,5 detik per objek
local function StartTeleportOptimized()
    -- Hitung offset berdasarkan OriginSquare
    GetOffset()  
    -- Validasi offset agar tidak (0,0,0)
    if X == 0 and Y == 0 and Z == 0 then
        warn("Offset belum diatur dengan benar. Pastikan Base Owner dan Base Receiver diisi dengan benar!")
        return
    end

    Count = 0

    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local PlaceStructure = ReplicatedStorage:FindFirstChild("PlaceStructure")
    if not PlaceStructure then
        warn("PlaceStructure folder not found!")
        return
    end
    local ClientPlacedStructure = PlaceStructure:FindFirstChild("ClientPlacedStructure")
    if not ClientPlacedStructure then
        warn("ClientPlacedStructure event not found!")
        return
    end

    local placementDelay = 0.2  -- Placement delay diubah menjadi 0,2 detik

    local function processObject(child, useBlueprint)
        local ownerObj = child:FindFirstChild("Owner")
        if not ownerObj then return end

        local ownerStr = tostring(ownerObj.Value):gsub("^%s*(.-)%s*$", "%1")
        if ownerStr == DesiredOwner then
            Count = Count + 1
            local itemName = child:FindFirstChild("ItemName") and child.ItemName.Value or child.Name
            local blueprintClass = nil
            if useBlueprint then
                blueprintClass = child:FindFirstChild("BlueprintWoodClass") and child.BlueprintWoodClass.Value or nil
            end

            local mainCFrame
            if child:FindFirstChild("MainCFrame") then
                mainCFrame = child.MainCFrame.Value
            elseif child:FindFirstChild("Main") and child.Main:IsA("BasePart") then
                mainCFrame = child.Main.CFrame
            end

            if mainCFrame then
                saveCFrameToFile(mainCFrame)
                -- Hitung CFrame baru: tambah offset ke posisi asli, pertahankan rotasi asli
                local newCFrame = CFrame.new(mainCFrame.Position + Vector3.new(X, Y, Z)) * CFrame.Angles(mainCFrame:ToEulerAnglesXYZ())
                print(">> Teleporting:", child.Name, "dari:", mainCFrame, "ke:", newCFrame)
                
                -- NON-AKTIFKAN physics (Anchor & Non-Collide) untuk seluruh part dalam model
                setPartsAnchoredAndNoCollision(child, true, false)
                -- Delay singkat agar physics state benar-benar terupdate (0,1 detik)
                task.wait(0.1)
                
                local args = { itemName, newCFrame, LocalPlayer, blueprintClass, child, true }
                ClientPlacedStructure:FireServer(unpack(args))
                
                -- Delay ekstra setelah teleportasi agar posisi stabil (placementDelay 0,2 detik + delay 0,2 detik)
                task.wait(placementDelay + 0.2)
                
                -- AKTIFKAN kembali physics (Anchor = false, CanCollide = true)
                setPartsAnchoredAndNoCollision(child, false, true)
                print("Teleported:", child.Name)
            else
                print(">> Tidak ada MainCFrame/Main part untuk:", child.Name)
            end
        end
    end

    local function isInCategory(n)
        return table.find(Structures, n) or table.find(Furniture, n) or table.find(Glass, n) or table.find(RedStone, n)
    end

    if DoStructure then
        for _, sName in ipairs(Structures) do
            for _, obj in ipairs(PlayerModels:GetChildren()) do
                if obj.Name == sName then
                    processObject(obj, true)
                end
            end
        end
    end

    if DoFurniture then
        for _, fName in ipairs(Furniture) do
            for _, obj in ipairs(PlayerModels:GetChildren()) do
                if obj.Name == fName then
                    processObject(obj, true)
                end
            end
        end
    end

    if DoGlass then
        for _, gName in ipairs(Glass) do
            for _, obj in ipairs(PlayerModels:GetChildren()) do
                if obj.Name == gName then
                    processObject(obj, false)
                end
            end
        end
    end

    if DoRedStone then
        for _, rName in ipairs(RedStone) do
            for _, obj in ipairs(PlayerModels:GetChildren()) do
                if obj.Name == rName then
                    processObject(obj, false)
                end
            end
        end
    end

    -- Proses objek lain (item/gift) yang tidak ada di kategori di atas
    for _, child in ipairs(PlayerModels:GetChildren()) do
        if child:IsA("Model") and not isInCategory(child.Name) then
            processObject(child, false)
        end
    end

    print("Total Teleported:", Count)
end

-- Tombol untuk memulai teleportasi bangunan/items
BaseMover:Button("Start Teleport (Buildings/Items)", function()
    print("=== MULAI TELEPORT (BUILDINGS/ITEMS) ===")
    StartTeleportOptimized()
    print("=== SELESAI TELEPORT (BUILDINGS/ITEMS) ===")
end)



-------------------------------------------------------
-- TELEPORTASI WIRE (Delay = 1 detik)
-------------------------------------------------------
local function StartWireTeleportOptimized()
    GetOffset()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local PlaceStructure = ReplicatedStorage:FindFirstChild("PlaceStructure")
    if not PlaceStructure then
        warn("PlaceStructure folder not found!")
        return
    end
    local ClientPlacedWire = PlaceStructure:FindFirstChild("ClientPlacedWire")
    if not ClientPlacedWire then
        warn("ClientPlacedWire event not found!")
        return
    end

    local placementDelay = 1

    for _, wire in ipairs(PlayerModels:GetChildren()) do
        if wire.Name == "Wire" then
            local owner = wire:FindFirstChild("Owner")
            if owner then
                local ownerStr = tostring(owner.Value):gsub("^%s*(.-)%s*$", "%1")
                if ownerStr == DesiredOwner then
                    local itemName = wire:FindFirstChild("ItemName") and wire.ItemName.Value or "Wire"
                    local itemInfo = ReplicatedStorage:FindFirstChild("ClientItemInfo") and ReplicatedStorage.ClientItemInfo:FindFirstChild(itemName)
                    if not itemInfo then
                        warn("Item info tidak ditemukan untuk wire:", itemName)
                        continue
                    end

                    local function getNewPos(part)
                        return part and (part.Position + Vector3.new(X, Y, Z)) or nil
                    end

                    local end1 = wire:FindFirstChild("End1")
                    local end2 = wire:FindFirstChild("End2")
                    if not end1 or not end2 then
                        warn("Wire tidak memiliki End1 atau End2:", wire.Name)
                        continue
                    end

                    local points = {}
                    table.insert(points, getNewPos(end1))
                    for i = 2, 60 do
                        local pt = wire:FindFirstChild("Point" .. i)
                        if pt then
                            table.insert(points, getNewPos(pt))
                        else
                            break
                        end
                    end
                    table.insert(points, getNewPos(end2))

                    ClientPlacedWire:FireServer(itemInfo, points, LocalPlayer, wire, true)
                    task.wait(placementDelay)
                    print("Teleported Wire:", wire.Name)
                end
            end
        end
    end

    print("Wire Teleport Completed")
end

BaseMover:Button("Start Wire Teleport", function()
    print("=== MULAI TELEPORT (WIRES) ===")
    StartWireTeleportOptimized()
    print("=== SELESAI TELEPORT (WIRES) ===")
end)


--#endregion


--#region Wood tab
-- Menambahkan Tab Wood Teleport
-- Menambahkan Tab Wood Teleport
local WoodTab = Luxt:Tab("Wood")
local Wood = WoodTab:Section("Wood Teleport")

-- Variabel
local Player = game.Players.LocalPlayer
local selectedPlanks = {}
local targetCoords = Vector3.zero
local maxDistance = 17
local isDragging = false
local continuousDragging = false

-- Fungsi untuk menetapkan koordinat target
local function SetTargetCoords()
    if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
        targetCoords = Player.Character.HumanoidRootPart.Position
        print("✅ Target coordinates set to:", targetCoords)
    else
        warn("⚠️ Player character atau HumanoidRootPart tidak ditemukan!")
    end
end

-- Fungsi untuk memilih plank
local function SelectPlanks()
    selectedPlanks = {}
    for _, model in pairs(game.Workspace.PlayerModels:GetChildren()) do
        if model:IsA("Model") and model.Name == "Plank" then
            if not model.PrimaryPart then
                local possiblePrimaryPart = model:FindFirstChild("Main") or model:FindFirstChild("WoodSection") or model:FindFirstChildWhichIsA("BasePart")
                if possiblePrimaryPart then
                    model.PrimaryPart = possiblePrimaryPart
                else
                    print("⚠️ Plank tanpa PrimaryPart ditemukan:", model.Name)
                end
            end
            if model.PrimaryPart then
                table.insert(selectedPlanks, model)
            end
        end
    end
    print("🎯 Total plank yang dipilih:", #selectedPlanks)
end

-- Fungsi untuk teleportasi satu plank
local function TeleportOnePlank()
    if isDragging then return end
    isDragging = true
    coroutine.wrap(function()
        if #selectedPlanks == 0 then
            print("⚠️ Tidak ada plank yang dipilih!")
            isDragging = false
            return
        end
        local remote = game:GetService("ReplicatedStorage").Interaction.ClientIsDragging
        for _, plank in ipairs(selectedPlanks) do
            local plankPosition = plank.PrimaryPart.Position
            local distance = (Player.Character.HumanoidRootPart.Position - plankPosition).Magnitude
            if distance <= maxDistance then
                remote:FireServer(plank)
                task.wait(0.2)
                plank:SetPrimaryPartCFrame(CFrame.new(targetCoords))
                task.wait(0.05)
                remote:FireServer(plank)
                task.wait()
                break
            end
        end
        isDragging = false
    end)()
end

-- Fungsi untuk teleportasi berkelanjutan
local function StartContinuousTeleport()
    if continuousDragging then return end
    continuousDragging = true
    coroutine.wrap(function()
        while continuousDragging do
            TeleportOnePlank()
            task.wait(0.05)
        end
    end)()
end

-- Fungsi untuk menghentikan teleportasi berkelanjutan
local function StopContinuousTeleport()
    continuousDragging = false
end

-- Menambahkan tombol di UI
Wood:Button("Set Target Coords", function()
    SetTargetCoords()
end)

Wood:Button("Select Planks", function()
    SelectPlanks()
end)

Wood:Button("Teleport One Plank", function()
    TeleportOnePlank()
end)

Wood:Toggle("Continuous Teleport", function(isToggled)
    if isToggled then
        StartContinuousTeleport()
    else
        StopContinuousTeleport()
    end
end)

--#endregion

--#region Item tab
local ItemTab = Luxt:Tab("Item")
local Item = ItemTab:Section("Item Teleport (same place)")

-- Variables
local selectedItems = {}
local maxDistance = 17
local isDragging = false
local continuousDragging = false
local countings = 0

-- Function to select items
local function SelectItems()
    selectedItems = {}
    for _, model in pairs(game.Workspace.PlayerModels:GetChildren()) do
        if model:IsA("Model") and model.Name ~= "Plank" then
            local possiblePrimaryPart = model:FindFirstChild("Main") or model:FindFirstChild("WoodSection") or model:FindFirstChildWhichIsA("BasePart")
            if possiblePrimaryPart then
                model.PrimaryPart = possiblePrimaryPart
                table.insert(selectedItems, model)
            else
                print("Item without suitable PrimaryPart found:", model.Name)
            end
        end
    end
    print("Selected items:", #selectedItems)
end

-- Function to teleport and move one item
local function DragAndMoveOneItem()
    if isDragging then return end
    isDragging = true

    coroutine.wrap(function()
        if #selectedItems == 0 then
            warn("No items selected!")
            isDragging = false
            return
        end

        local character = game.Players.LocalPlayer.Character
        if not character or not character:FindFirstChild("HumanoidRootPart") then
            warn("Player character or HumanoidRootPart not found!")
            isDragging = false
            return
        end

        local remote = game:GetService("ReplicatedStorage"):FindFirstChild("Interaction").ClientIsDragging

        for _, item in ipairs(selectedItems) do
            if item.PrimaryPart then
                local itemPosition = item.PrimaryPart.Position
                local distance = (character.HumanoidRootPart.Position - itemPosition).Magnitude

                if distance <= maxDistance then
                    countings = countings + 1
                    remote:FireServer(item)
                    task.wait(0.15)
                    item:SetPrimaryPartCFrame(CFrame.new(itemPosition + Vector3.new(179, 0, 322)))
                    task.wait(0.05)
                    remote:FireServer(item)
                    task.wait()
                    break -- Teleport only one item at a time
                end
            end
        end

        isDragging = false
    end)()
end

-- Function to continuously teleport and move items
local function StartContinuousTeleport()
    if continuousDragging then return end
    continuousDragging = true
    print("Starting continuous teleport...")

    coroutine.wrap(function()
        while continuousDragging do
            DragAndMoveOneItem()
            task.wait(0.05) -- Delay to avoid overloading the system
        end
    end)()
end

-- Function to stop continuous teleport
local function StopContinuousTeleport()
    continuousDragging = false
    print("Continuous teleport stopped!")
end

-- Connect functions to buttons in Luxt UI
Item:Button("Select Item", function()
    SelectItems()
end)

Item:Button("Teleport Item", function()
    DragAndMoveOneItem()
end)

Item:Toggle("Continuous Teleport", function(isToggled)
    if isToggled then
        StartContinuousTeleport()
    else
        StopContinuousTeleport()
    end
end)

--#endregion





--#region Slot Tab
local SlotTab = Luxt:Tab("Slot")
local Property = SlotTab:Section("Property")

-- Free Land
function FreeLand()
    for i,v in next, game:GetService("Workspace").Properties:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == nil then
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientPurchasedProperty:FireServer(v,v.OriginSquare.Position)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0,2,0)
            break
        end
    end
end
Property:Button("Free Land", function()
    FreeLand()
end)

-- Max Land
function MaxLand()
    for s,d in pairs(workspace.Properties:GetChildren()) do
        if d:FindFirstChild("Owner") and d:FindFirstChild("OriginSquare") and d.Owner.Value == game.Players.LocalPlayer then
            local PlotPos = d.OriginSquare.Position
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 40, PlotPos.Y, PlotPos.Z))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 40, PlotPos.Y, PlotPos.Z))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X , PlotPos.Y, PlotPos.Z + 40))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X , PlotPos.Y, PlotPos.Z - 40))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 40 , PlotPos.Y, PlotPos.Z + 40))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 40 , PlotPos.Y, PlotPos.Z - 40))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 40 , PlotPos.Y, PlotPos.Z + 40))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 40 , PlotPos.Y, PlotPos.Z - 40))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 80 , PlotPos.Y, PlotPos.Z))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 80 , PlotPos.Y, PlotPos.Z))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X , PlotPos.Y, PlotPos.Z + 80))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X , PlotPos.Y, PlotPos.Z - 80))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 80 , PlotPos.Y, PlotPos.Z + 80))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 80 , PlotPos.Y, PlotPos.Z - 80))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 80 , PlotPos.Y, PlotPos.Z + 80))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 80 , PlotPos.Y, PlotPos.Z - 80))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 40 , PlotPos.Y, PlotPos.Z + 80))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 40 , PlotPos.Y, PlotPos.Z + 80))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 80 , PlotPos.Y, PlotPos.Z + 40))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 80 , PlotPos.Y, PlotPos.Z - 40))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 80 , PlotPos.Y, PlotPos.Z + 40))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 80 , PlotPos.Y, PlotPos.Z - 40))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X + 40 , PlotPos.Y, PlotPos.Z - 80))
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d,CFrame.new(PlotPos.X - 40 , PlotPos.Y, PlotPos.Z - 80))
        end
    end
end
Property:Button("Max Land", function()
    MaxLand()
end)

-- Sell Sold Sign
function SellSoldSign()
    for i,v in next, game:GetService("Workspace").PlayerModels:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
            if v:FindFirstChild("ItemName") and v.ItemName.Value == "PropertySoldSign" then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v.Main.CFrame.p) + Vector3.new(0,0,2)
                game:GetService("ReplicatedStorage").Interaction.ClientInteracted:FireServer(v,"Take down sold sign")
                for i = 1,30 do
                    game:GetService("ReplicatedStorage").Interaction.ClientIsDragging:FireServer(v)
                    v.Main.CFrame = CFrame.new(314.54, -0.5, 86.823)
                    task.wait()
                end
            end
        end
    end
end
Property:Button("Sell Sign", function()
    SellSoldSign()
end)

--#endregion
--#region World tab
local WorldTab = Luxt:Tab("World")
local World = WorldTab:Section("Misc")

World:Button("Better Graphics", function()
    local Lighting = game.Lighting
    local ColorCorrection = game.Lighting.ColorCorrection
    local Blur = Instance.new("BlurEffect")
    local SunRays = Instance.new("SunRaysEffect")
    local Bloom = Instance.new("BloomEffect")
  
    Blur.Parent = Lighting
    SunRays.Parent = Lighting
    Bloom.Parent = Lighting
  
    Blur.Enabled = true
    Blur.Size = 3
  
    SunRays.Enabled = true
    SunRays.Intensity = 0.2
    SunRays.Spread = 1
  
    Bloom.Enabled = true
    Bloom.Intensity = 1
    Bloom.Size = 32
    Bloom.Threshold = 1
    
    Lighting.FogColor = Color3.fromRGB(120, 150, 200)
    Lighting.GeographicLatitude = 500
    Lighting.Brightness = 0.1
    Lighting.FogEnd = 750
    Lighting.FogStart = 0
    Lighting.OutdoorAmbient = Color3.fromRGB(112, 117, 128)
    
    ColorCorrection.Brightness = 0.1
    ColorCorrection.Contrast = 0.15
    ColorCorrection.Enabled = true
    ColorCorrection.Saturation = 0.25
    ColorCorrection.TintColor = Color3.fromRGB(255, 222, 211)
    
    --delete--
    Lighting.Owner:Destroy()
    Lighting.Spook:Destroy()
    Lighting.SunPos:Destroy()
end)

-- No Fog
World:Button("Remove Fog", function()
    game.Lighting.FogStart = 9999
    game.Lighting.FogEnd = 9999
end)

-- Day Time
local Day
    World:Toggle("Day", function(isToggled)
    Day = isToggled
end)

local lighting = game:GetService("Lighting")
function updateLighting()
        lighting.TimeOfDay = "12:00:00"
        lighting.SunPos.Value = 1
        lighting.Ambient = Color3.new(1, 1, 1)

        lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
        lighting.ColorShift_Top = Color3.new(1, 1, 1)
end
game.Lighting.Changed:Connect(function()
    if Day then
        updateLighting()
    end
end)



--#endregion
